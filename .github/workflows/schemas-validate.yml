name: Schemas Validate (Avro)

on:
  push:
    paths:
      - 'systemupdate-web/libs/proto-schemas/**'
      - 'systemupdate-web/.github/workflows/schemas-validate.yml'
  pull_request:
    paths:
      - 'systemupdate-web/libs/proto-schemas/**'
      - 'systemupdate-web/.github/workflows/schemas-validate.yml'

jobs:
  avro-validate:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: systemupdate-web
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install validator deps
        run: |
          python -m pip install --upgrade pip
          pip install fastavro jsonschema

      - name: Validate Avro schemas
        run: |
          python - << 'PY'
          import sys, json, glob
          from fastavro.schema import load_schema
          paths = glob.glob('libs/proto-schemas/avro/**/*.avsc', recursive=True)
          if not paths:
              print('No Avro schemas found. Skipping.', flush=True)
              sys.exit(0)
          for p in paths:
              try:
                  load_schema(p)
                  print(f'OK: {p}')
              except Exception as e:
                  print(f'ERROR in {p}: {e}')
                  sys.exit(1)
          PY

      - name: Validate JSON Schemas (Draft 2020-12)
        run: |
          python - << 'PY'
          import sys, json, glob
          from jsonschema import Draft202012Validator
          paths = glob.glob('libs/proto-schemas/json/**/*.json', recursive=True)
          if not paths:
              print('No JSON schemas found. Skipping.', flush=True)
              sys.exit(0)
          for p in paths:
              try:
                  with open(p, 'r', encoding='utf-8') as f:
                      schema = json.load(f)
                  Draft202012Validator.check_schema(schema)
                  print(f'OK: {p}')
              except Exception as e:
                  print(f'ERROR in {p}: {e}')
                  sys.exit(1)
          PY
