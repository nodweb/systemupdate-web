name: Gateway OIDC Smoke (Optional)

on:
  workflow_dispatch:

# Gate this job behind an environment variable to ensure Kong Enterprise/Konnect OIDC plugin is available
env:
  KONG_ENTERPRISE: ${{ vars.KONG_ENTERPRISE || '0' }}

jobs:
  oidc-smoke:
    if: env.KONG_ENTERPRISE == '1'
    runs-on: ubuntu-latest
    timeout-minutes: 40

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create CI override (map proxy to 8081 and admin to 8001; ensure admin enabled)
        run: |
          cat > ci.oidc.yml <<'YAML'
          services:
            gateway:
              ports:
                - "8081:8000"
                - "8001:8001"
              environment:
                KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
              depends_on: {}
          YAML

      - name: Start Keycloak, command-service, and gateway
        run: |
          docker compose -f docker-compose.yml -f ci.oidc.yml --profile auth up -d keycloak postgres redis command-service gateway

      - name: Wait for services
        run: |
          for i in {1..60}; do curl -fsS http://localhost:8004/healthz && break || sleep 2; done
          for i in {1..60}; do code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8081); [[ "$code" == "200" || "$code" == "404" ]] && break || sleep 2; done
          for i in {1..60}; do curl -fsS http://localhost:8080/realms/systemupdate-dev/.well-known/openid-configuration && break || sleep 2; done

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Get OIDC discovery URL
        run: |
          disco=$(curl -s http://localhost:8080/realms/systemupdate-dev/.well-known/openid-configuration)
          discovery=$(echo "$disco" | jq -r '.issuer + "/.well-known/openid-configuration"')
          echo "DISCOVERY=$discovery" >> $GITHUB_ENV

      - name: Create temporary route '/oidc-cmd' (strip_path=true) for command-service
        run: |
          curl -s -X POST http://localhost:8001/services/command-service/routes \
            -d name=oidc-cmd-route \
            -d 'paths[]=/oidc-cmd' \
            -d strip_path=true | jq .

      - name: Enable OIDC plugin on oidc-cmd-route (bearer-only)
        run: |
          # Note: Requires Kong Enterprise/Konnect OIDC plugin
          curl -s -X POST http://localhost:8001/routes/oidc-cmd-route/plugins \
            -d name=oidc \
            -d config.discovery=$DISCOVERY \
            -d config.bearer_only=true \
            -d config.client_id=frontend \
            -d config.ssl_verify=false | jq .

      - name: Obtain user access token from Keycloak (password grant)
        run: |
          token=$(curl -s -X POST \
            -d 'client_id=frontend' \
            -d 'grant_type=password' \
            -d 'username=devuser' \
            -d 'password=devpass' \
            http://localhost:8080/realms/systemupdate-dev/protocol/openid-connect/token | jq -r '.access_token')
          if [ -z "$token" ] || [ "$token" = "null" ]; then echo "Failed to get token"; exit 1; fi
          echo "TOKEN=$token" >> $GITHUB_ENV

      - name: Expect 401 without token at /oidc-cmd/openapi.json
        run: |
          code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8081/oidc-cmd/openapi.json)
          echo "code=$code"; test "$code" = "401"

      - name: Expect 200 with token at /oidc-cmd/openapi.json
        run: |
          code=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer $TOKEN" http://localhost:8081/oidc-cmd/openapi.json)
          echo "code=$code"; test "$code" = "200"

      - name: Teardown
        if: always()
        run: docker compose -f docker-compose.yml -f ci.oidc.yml --profile auth down -v

  skipped:
    if: env.KONG_ENTERPRISE != '1'
    runs-on: ubuntu-latest
    steps:
      - run: echo "Skipping OIDC smoke; set repository variable KONG_ENTERPRISE=1 to enable."
