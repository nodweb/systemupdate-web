# Local development scaffold for SystemUpdate-Web (M0)
# NOTE: Service definitions are minimal and may be extended in M1+.

services:
  postgres:
    image: postgres:15-alpine
    container_name: su-postgres
    environment:
      POSTGRES_USER: systemupdate
      POSTGRES_PASSWORD: systemupdate
      POSTGRES_DB: systemupdate
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 3s
      retries: 20

  redis:
    image: redis:7-alpine
    container_name: su-redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 20

  zookeeper:
    image: bitnami/zookeeper:3.9
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
    ports:
      - "2181:2181"

  prometheus:
    image: prom/prometheus:v2.53.0
    container_name: su-prometheus
    volumes:
      - ./observability/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    depends_on:
      otel-collector:
        condition: service_started

  grafana:
    image: grafana/grafana:11.1.0
    container_name: su-grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    ports:
      - "3000:3000"
    depends_on:
      prometheus:
        condition: service_started

  kafka:
    image: bitnami/kafka:3.7
    environment:
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
    depends_on:
      zookeeper:
        condition: service_started
    ports:
      - "9092:9092"
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list >/dev/null 2>&1 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 12

  schema-registry:
    image: confluentinc/cp-schema-registry:7.6.1
    container_name: su-schema-registry
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8081:8081"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8081/subjects >/dev/null || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 12

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio:/data
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:9000/minio/health/ready >/dev/null || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 12

  auth-service:
    build: ./services/auth-service
    container_name: su-auth
    environment:
      PORT: 8001
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8001"]
    ports:
      - "8001:8001"
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  ws-hub:
    build: ./services/ws-hub
    container_name: su-ws-hub
    environment:
      PORT: 8002
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8002"]
    ports:
      - "8002:8002"
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy

  device-service:
    build: ./services/device-service
    container_name: su-device
    environment:
      PORT: 8003
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8003"]
    ports:
      - "8003:8003"
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy

  command-service:
    build: ./services/command-service
    container_name: su-command
    environment:
      PORT: 8004
      KAFKA_BOOTSTRAP: kafka:9092
      COMMAND_EVENTS_TOPIC: command.events
      POSTGRES_HOST: postgres
      POSTGRES_PORT: "5432"
      POSTGRES_USER: systemupdate
      POSTGRES_PASSWORD: systemupdate
      POSTGRES_DB: systemupdate
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8004"]
    ports:
      - "8004:8004"
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  data-ingest-service:
    build: ./services/data-ingest-service
    container_name: su-data-ingest
    environment:
      PORT: 8005
      KAFKA_BOOTSTRAP: kafka:9092
      INGEST_TOPIC: device.ingest.raw
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8005"]
    ports:
      - "8005:8005"
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy

  analytics-service:
    build: ./services/analytics-service
    container_name: su-analytics
    environment:
      PORT: 8006
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8006"]
    ports:
      - "8006:8006"
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy

#  gateway:
#    image: kong:3.6
#    # Configure declarative config and DB-less mode in M1

  otel-collector:
    image: otel/opentelemetry-collector:0.95.0
    container_name: su-otel-collector
    volumes:
      - ./observability/otel-collector-config.yaml:/etc/otel/config.yaml:ro
    command: ["--config", "/etc/otel/config.yaml"]
    ports:
      - "4317:4317"  # OTLP/gRPC
      - "4318:4318"  # OTLP/HTTP
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:13133/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 12

volumes:
  pgdata:
  minio:
